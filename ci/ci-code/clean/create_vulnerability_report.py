#!/usr/bin/env python3
import json
import uuid
import jsonschema
import argparse
import requests


def parser():
    # Set up argument parser
    parser = argparse.ArgumentParser(
        description="Generate vulnerability reports in JSON or HTML format."
    )
    parser.add_argument(
        "input_file",
        help="Path to the input vulnerability report JSON file.",
    )
    parser.add_argument(
        "output_file",
        help="Path to the output file (JSON or HTML).",
        default="gl-container-report.html",
    )
    parser.add_argument(
        "--output",
        choices=["json", "html"],
        default="html",
        help="Specify the output format: 'json' for GitLab JSON report or 'html' for HTML report.",
    )
    return parser


def convert_vulnerability_report_to_gitlab(security_report):
    """
    Create a json report complient with the GitLab Container Scanning report format.
    https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/blob/master/dist/container-scanning-report-format.json
    """
    gitlab_report = {
        "version": "2.0.0",
        "scan": {
            "scanner": {
                "id": "trivy",
                "name": "Trivy",
                "url": "https://github.com/aquasecurity/trivy/",
                "vendor": {"name": "GitLab"},
                "version": "0.26.0",
            },
            "analyzer": {
                "id": "gcs",
                "name": "GitLab Container Scanning",
                "vendor": {"name": "GitLab"},
                "version": "5.1.0",
            },
            "type": "container_scanning",
            "start_time": "2022-05-19T12:47:33",
            "end_time": "2022-05-19T12:47:42",
            "status": "success",
        },
        "vulnerabilities": [],
    }

    for cve, vulnerability in security_report.items():
        severity = vulnerability.get("Severity", "Unknown")
        gitlab_vuln = {
            "id": str(uuid.uuid4()),
            "category": "container_scanning",
            "message": vulnerability.get("Title") or cve,
            "description": "TODO",
            "severity": vulnerability.get("Severity", "Unknown").capitalize(),
            "confidence": "High",
            "scanner": {"id": "trivy", "name": "Trivy"},
            "location": {
                "dependency": {
                    "package": {"name": vulnerability.get("PkgName")},
                    "version": vulnerability.get("InstalledVersion"),
                },
                "operating_system": "TODO",
                "image": ";".join(vulnerability.get("Modules", ["unknown"])),
            },
            "identifiers": [
                {
                    "type": "cve",
                    "name": cve,
                    "value": cve,
                }
            ],
        }
        gitlab_report["vulnerabilities"].append(gitlab_vuln)

    return gitlab_report


def consolidate_reports_to_html(security_report):
    """
    Create a HTML report from the security report.
    """
    consolidated_data = []
    for cve, details in security_report.items():
        consolidated_data.append(
            {
                "ID": cve,
                "Title": details.get("Title", "Unknown"),
                "PkgName": details["PkgName"],
                "Severity": details["Severity"],
                "InstalledVersion": details.get("InstalledVersion", "Unknown"),
                "FixedVersion": details.get("FixedVersion", "None"),
                "Modules": details.get("Modules", ["unknown"]),
            }
        )

    # Generate HTML content
    html_content = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Consolidated Vulnerability Report</title>
        <style>
            table { width: 100%; border-collapse: collapse; }
            th, td { border: 1px solid black; padding: 8px; text-align: left; }
            th { background-color: #f2f2f2; }
            .critical { background-color: #f5c6cb; }
            .high { background-color: #f8d7da; }
            .medium { background-color: #fff3cd; }
            .low { background-color: #d4edda; }
            th:nth-child(1) { width: 6%; } /* ID column */
            th:nth-child(2) { width: 15%; } /* Title column */
            th:nth-child(3) { width: 10%; } /* PkgName column */
            th:nth-child(4) { width: 4%; } /* Severity column */
            th:nth-child(5) { width: 15%; } /* Installed Version column */
            th:nth-child(6) { width: 15%; } /* Fixed Version column */
            th:nth-child(7) { width: 35%; } /* Modules column */
        </style>
    </head>
    <body>
        <h1>Consolidated Vulnerability Report</h1>
        <table>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Title</th>
                    <th>PkgName</th>
                    <th>Severity</th>
                    <th>Installed Version</th>
                    <th>Fixed Version</th>
                    <th>Modules</th>
                </tr>
            </thead>
            <tbody>
    """

    for entry in consolidated_data:
        severity_class = entry["Severity"].lower()  # Map severity to CSS class
        modules_list = "".join(
            f"<li>{module}</li>" for module in entry["Modules"]
        )  # Create list items for each module
        html_content += f"""
        <tr class="{severity_class}">
            <td>{entry['ID']}</td>
            <td>{entry['Title']}</td>
            <td>{entry['PkgName']}</td>
            <td>{entry['Severity']}</td>
            <td>{entry['InstalledVersion']}</td>
            <td>{entry['FixedVersion']}</td>
            <td><ul>{modules_list}</ul></td>
        </tr>
        """

    html_content += """
            </tbody>
        </table>
    </body>
    </html
    """
    return html_content


def create_gitlab_report(trivy_data, output_path):
    gitlab_data = convert_vulnerability_report_to_gitlab(trivy_data)
    response = requests.get(
        "https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/raw/master/dist/container-scanning-report-format.json"
    )
    try:
        jsonschema.validate(instance=gitlab_data, schema=response.json())
    except jsonschema.ValidationError:
        print(f"ERROR - Report does not satisfy json schema! {gitlab_data}")
    with open(output_path, "w") as f:
        json.dump(gitlab_data, f, indent=2)


def create_html_report(trivy_data, output_path):
    html_report = consolidate_reports_to_html(trivy_data)
    with open(output_path, "w") as f:
        f.write(html_report)


def main():
    args = parser().parse_args()

    input_path = args.input_file
    output_path = args.output_file
    try:
        with open(input_path, "r") as f:
            trivy_data = json.load(f)
    except FileNotFoundError:
        print(f"INFO - No security file was found at {input_path}!")
        trivy_data = {}

    if args.output == "json":
        create_gitlab_report(trivy_data, output_path)
    elif args.output == "html":
        create_html_report(trivy_data, output_path)


if __name__ == "__main__":
    main()
