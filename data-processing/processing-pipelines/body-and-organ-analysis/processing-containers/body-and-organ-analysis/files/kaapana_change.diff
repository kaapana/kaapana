diff --git a/body_organ_analysis/compute/io.py b/body_organ_analysis/compute/io.py
index f5a5b9c..501e52b 100644
--- a/body_organ_analysis/compute/io.py
+++ b/body_organ_analysis/compute/io.py
@@ -82,13 +82,14 @@ def set_dcm_params(
 
 
 def store_dicoms(input_folder: Path, segmentation_folder: Path) -> List[Dict[str, Any]]:
+    """
+    Convert segmentations from nifti to dicom and store them in the segmentation_folder.
+    """
     import pydicom_seg
-    from dicomweb_client.api import DICOMwebClient
 
     generated_dicoms: List[pydicom.Dataset] = []
     image, dicom_files = _load_series_from_disk(input_folder)
     img_dcm = pydicom.dcmread(dicom_files[0], stop_before_pixels=True)
-    start = time()
     output_dcm_info = []
     timestamp = datetime.now()
     templates = sorted((Path("body_organ_analysis") / "templates").glob("*-meta.json"))
@@ -157,35 +158,7 @@ def store_dicoms(input_folder: Path, segmentation_folder: Path) -> List[Dict[str
                 "sop_instance_uid": out_dcm.SOPInstanceUID,
             }
         )
-        # out_dcm.save_as(segmentation_folder / f"{output_kind}.dcm")
-        generated_dicoms.append(out_dcm)
-    if (segmentation_folder / "report.dcm").exists():
-        pdf_dcm = pydicom.dcmread(segmentation_folder / "report.dcm")
-        pdf_dcm.SeriesDescription = "Body Composition Analysis Report"
-        set_dcm_params(
-            img_dcm=img_dcm,
-            out_dcm=pdf_dcm,
-            series_id=len(templates),
-            output_name="report",
-            timestamp=timestamp,
-        )
-        generated_dicoms.append(pdf_dcm)
-
-    # Use Orthanc DICOM-Web interface to upload files
-    new_session = requests.Session()
-    new_session.auth = (os.environ["UPLOAD_USER"], os.environ["UPLOAD_PWD"])
-    logger.info(
-        f"Uploading {len(generated_dicoms)} segmentations to {os.environ['SEGMENTATION_UPLOAD_URL']} "
-        f"with user {os.environ['UPLOAD_USER']}."
-    )
-    client = DICOMwebClient(
-        os.environ["SEGMENTATION_UPLOAD_URL"],
-        session=new_session,
-    )
-    client.store_instances(generated_dicoms)
-    logger.info(f"Storing results as DICOMS: DONE in {time() - start:0.5f}s")
-
-    return output_dcm_info
+        out_dcm.save_as(segmentation_folder / f"{output_kind}.dcm")
 
 
 def _load_series_from_disk(working_dir: Path) -> Tuple[sitk.Image, List[str]]:
