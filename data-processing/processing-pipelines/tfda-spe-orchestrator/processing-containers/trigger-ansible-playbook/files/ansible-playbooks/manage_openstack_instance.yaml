---
- name: Create/delete an OpenStack based instance as an isolated execution environment
  hosts: localhost
  gather_facts: false

  vars:
    ssh_key: "{{ ssh_key_name }}"
    ssh_key_operator_path: "{{ ssh_key_operator_path }}"
    os_auth_url: "{{ os_auth_url }}"
    project_name: "{{ os_project_name }}"
    os_project_id: "{{ os_proj_id }}"
    os_network_id: "{{ os_network_id | default('') }}"
    os_floating_ip_pools: "{{ os_floating_ip_pools | default('') }}"
    os_user_domain: "{{ os_user_domain }}"
    username: "{{ username }}"
    password: "{{ password }}"
    instance_name: "{{ instance_name | default('test-isolated-environment') }}"
    volume_size: "{{ os_volume_size | default('150') }}"
    instance_image: "{{ os_image }}"
    instance_flavor: "{{ os_instance_flavor }}"
    instance_state: "{{ instance_state | default('present') }}"
    sec_grp: "{{ os_security_groups }}"

  environment:
    OS_IDENTITY_API_VERSION: 3
    OS_ENDPOINT_TYPE: publicURL

  tasks:
    - name: Check if OpenStack credentials are provided
      fail:
        msg: "OpenStack username/password {{ item }} not defined"
      when: item is not defined
      with_items:
        - "{{ username }}"
        - "{{ password }}"
      no_log: True
    
    - name: Check if all required variables are passed using --extra-vars
      fail:
        msg: "Variable {{ item }} not defined"
      when: item is not defined
      with_items:
        - "{{ ssh_key_name }}"
        - "{{ os_auth_url }}"
        - "{{ os_project_name }}"
        - "{{ os_project_id }}"
        - "{{ os_network_id }}"
        - "{{ os_floating_ip_pools }}"
        - "{{ os_user_domain }}"
        - "{{ os_image }}"
        - "{{ os_instance_flavor }}"
        - "{{ os_security_groups }}"

    - name: check if instance exists
      environment: 
        OS_TENANT_ID: "{{ os_project_id }}"
      openstack.cloud.server_info:
        auth:
          auth_url: "{{ os_auth_url }}"
          username: "{{ username }}"
          password: "{{ password }}"
          user_domain_name: "{{ os_user_domain }}"
          project_name: "{{ os_project_name }}"
        server: "{{ instance_name }}"
        api_timeout: 30
      register: inst_info

    - name: if instance not found
      debug: 
        msg: "Instance does NOT already exist!"
      when: inst_info.openstack_servers | length == 0
    
    - name: Create instance if not already present
      block:
      - name: Create ssh key-pair if not existing
        openssh_keypair:
          path: "/root/.ssh/{{ ssh_key }}"
          type: rsa
          size: 4096
          state: present
          force: no

      - name: Add ssh-key to OpenStack cloud
        environment:
          OS_TENANT_ID: "{{ os_project_id }}"
        openstack.cloud.keypair:
          auth:
            auth_url: "{{ os_auth_url }}"
            username: "{{ username }}"
            password: "{{ password }}"
            user_domain_name: "{{ os_user_domain }}"
            project_name: "{{ project_name }}"
          state: replace # will only replace if the remote key is different than local
          name: "{{ ssh_key }}"
          public_key_file: "/root/.ssh/{{ ssh_key }}.pub"

      - name: Download ssh private key to operator directory
        copy:
          src: "/root/.ssh/{{ ssh_key }}"
          dest: "{{ ssh_key_operator_path }}/{{ ssh_key }}"
          # owner: foo
          # group: foo
          mode: '0600'
      
      - name: Download ssh public key to operator directory
        copy:
          src: "/root/.ssh/{{ ssh_key }}.pub"
          dest: "{{ ssh_key_operator_path }}/{{ ssh_key }}.pub"
          # owner: foo
          # group: foo
          mode: '0600'

      - name: check ssh_key_file present
        stat: 
          path: "~/.ssh/{{ ssh_key }}"
        register: ssh_key_file

      - name: check ssh_key_file
        fail: msg="The ssh-key ~/.ssh/{{ ssh_key }} must be present on the host!"
        when: not ssh_key_file.stat.exists

      - name: launch an instance
        environment:
          OS_TENANT_ID: "{{ os_project_id }}"
        openstack.cloud.server:
          state: "{{ instance_state }}"
          auth:
            auth_url: "{{ os_auth_url }}"
            username: "{{ username }}"
            password: "{{ password }}"
            user_domain_name: "{{ os_user_domain }}"
            project_name: "{{ project_name }}"
          network: "{{ os_network_id }}"
          name: "{{ instance_name }}"
          image: "{{ instance_image }}"
          volume_size: "{{ volume_size }}"
          flavor: "{{ instance_flavor }}"
          key_name: "{{ ssh_key }}"
          region_name: regionOne
          boot_from_volume: True
          terminate_volume: True
          security_groups: "{{ sec_grp }}"
          delete_fip: yes
          # auto_ip: yes
          reuse_ips: yes
          wait: yes
          timeout: 120
          # floating_ips:
          #   - 10.133.26.2
          floating_ip_pools:
            - "{{ os_floating_ip_pools }}"
          meta:
            hostname: new_instance.localdomain
        register: new_instance

      - name: Reset fingerprint
        command: ssh-keygen -R {{ new_instance.server.accessIPv4 }}
        ignore_errors: yes

      - name: Wait for SSH on the Instance
        command: "ssh -oBatchMode=yes -oStrictHostKeyChecking=no -i ~/.ssh/{{ ssh_key }} root@{{ new_instance.server.accessIPv4 }} true"
        register: result
        until: result.rc == 0
        retries: 6
        delay: 10

      - name: RESULT
        debug:
          msg: "OPENSTACK INSTANCE CREATED SUCCESSFULLY"

      - name: RETURN
        debug:
          msg: "isolated_env_ip: {{ new_instance.server.accessIPv4 }}"
      
      when: (inst_info.openstack_servers | length == 0) and "{{ instance_state }}" == "present"

    - name: delete an instance if found
      block:
      - name: delete an instance  
        environment: 
          OS_TENANT_ID: "{{ os_project_id }}"
        openstack.cloud.server:
          state: "{{ instance_state }}"
          auth:
            auth_url: "{{ os_auth_url }}"
            username: "{{ username }}"
            password: "{{ password }}"
            user_domain_name: "{{ os_user_domain }}"
            project_name: "{{ os_project_name }}"
          name: "{{ instance_name }}"
          terminate_volume: True
          delete_fip: yes
          timeout: 120
        register: del_instance

      - name: RESULT
        debug:
          msg: "INSTANCE DELETED SUCCESSFULLY"

      when: (inst_info.openstack_servers | length > 0) and "{{ instance_state }}" == "absent"
