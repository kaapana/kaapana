{{- $uuid := uuidv4 | trunc 10 }}
{{- if not .Values.image }}
{{- $uuid = "server" }}
{{- end }}
kind: Deployment
apiVersion: apps/v1
metadata:
  name: code-{{ $uuid }}
  namespace: "{{ not .Values.image | ternary  .Values.global.services_namespace .Values.global.jobs_namespace }}"
  labels:
    k8s-app: code-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app-name: code-{{ $uuid }}
  template:
    metadata:
      labels:
        app-name: code-{{ $uuid }}
    spec:
      securityContext:
        runAsUser: 0
      containers:
      - name: code-server
        {{- if not .Values.image }}
        image: "{{ .Values.global.registry_url }}/code-server:{{ .Values.global.kaapana_build_version  }}"
        {{- else }}
        image: "{{ .Values.image }}"
        {{- end }}
        imagePullPolicy: {{ .Values.global.pull_policy_pods }}
        command: ["code-server"]
        args: ["--auth", "none", "--bind-addr", "0.0.0.0:8080","/app"]
        env:
        {{- range $envVar := .Values.envVars }}
        - name: {{ $envVar.name }}
          value: "{{ $envVar.value }}"
        {{- end }}
        resources:
          requests:
            memory: 200Mi
          limits:
            memory: 30Gi
        volumeMounts:
          {{- if not .Values.volumeMounts }}
          - name: models
            mountPath: /app/models
          - name: airflow-dags
            mountPath: /app/dags
          - name: airflow-data
            mountPath: /app/data
          - name: airflow-plugins
            mountPath: /app/plugins
          - name: airflow-mounted-scripts
            mountPath: /app/mounted_scripts
          {{- else }}
          - name: dshm
            mountPath: /dev/shm
          {{- end }}
          - name: configs
            mountPath: /root/.local/share/code-server/User/keybindings.json
            subPath: keybindings.json
          - name: configs
            mountPath:  /root/.vscode/launch.json
            subPath: launch.json
          - name: configs
            mountPath: /root/.local/share/code-server/User/settings.json
            subPath: settings.json
          {{- range $volumeMount := .Values.volumeMounts }}
          - name: {{ $volumeMount.name }}
            mountPath: "{{ $volumeMount.mountPath }}"
          {{- end }}
      volumes:
      {{- if not .Values.volumes }}
      - name: models
        persistentVolumeClaim:
          claimName: models-pv-claim
      - name: airflow-dags
        persistentVolumeClaim:
          claimName: dags-pv-claim
      - name: airflow-plugins
        persistentVolumeClaim:
          claimName: af-plugins-pv-claim
      - name: airflow-data
        persistentVolumeClaim:
          claimName: af-data-pv-claim
      - name: airflow-mounted-scripts
        persistentVolumeClaim:
          claimName: ms-pv-claim
      {{- else }}
      - name: dshm
        emptyDir:
          medium: Memory
      {{- end }}
      - name: configs
        configMap:
          name: code-config-{{ $uuid }}
          items:
          - key: keybindings.json
            path: keybindings.json
          - key: launch.json
            path: launch.json
          - key: user_settings.json
            path: settings.json
      {{- range $volume := .Values.volumes }}
      - name: {{ $volume.name }}
        persistentVolumeClaim:
          claimName: {{ $volume.claim_name }}
      {{- end }}
      imagePullSecrets:
      - name: registry-secret
---
kind: Service
apiVersion: v1
metadata:
  name: code-{{ $uuid }}
  namespace: "{{ not .Values.image | ternary  .Values.global.services_namespace .Values.global.jobs_namespace }}"
spec:
  selector:
    app-name: code-{{ $uuid }}
  ports:
    - protocol: TCP
      port: 8080
      name: code-http
  type: ClusterIP
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: cs-strip-prefix-{{ $uuid }}
  namespace: "{{ not .Values.image | ternary  .Values.global.services_namespace .Values.global.jobs_namespace }}"
spec:
  stripPrefix:
    prefixes:
    - /code-{{ $uuid }}
    forceSlash: true
---
apiVersion: networking.k8s.io/v1 
kind: Ingress
metadata:
  name: code-{{ $uuid }}
  namespace: "{{ not .Values.image | ternary  .Values.global.services_namespace .Values.global.jobs_namespace }}"
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.middlewares: {{  .Values.global.services_namespace  }}-auth-check@kubernetescrd,{{ not .Values.image | ternary  .Values.global.services_namespace .Values.global.jobs_namespace }}-cs-strip-prefix-{{ $uuid }}@kubernetescrd
    traefik.ingress.kubernetes.io/preserve-host: "true"
    kubernetes.io/ingress.global-static-ip-name: "kubernetes-ingress"
spec:
  rules:
  - host: 
    http:
      paths:
      - path: /code-{{ $uuid }}/
        pathType: ImplementationSpecific
        backend:
          service:
            name: code-{{ $uuid }}
            port:
              name: code-http
---
apiVersion: v1
data:
  keybindings.json: |-
    // Place your key bindings in this file to override the defaults
    [
        {
            "key": "ctrl+alt+down",
            "command": "editor.action.copyLinesDownAction",
            "when": "editorTextFocus && !editorReadonly"
        },
        {
            "key": "ctrl+shift+alt+down",
            "command": "-editor.action.copyLinesDownAction",
            "when": "editorTextFocus && !editorReadonly"
        },
        {
            "key": "ctrl+alt+up",
            "command": "editor.action.copyLinesUpAction",
            "when": "editorTextFocus && !editorReadonly"
        },
        {
            "key": "ctrl+shift+alt+up",
            "command": "-editor.action.copyLinesUpAction",
            "when": "editorTextFocus && !editorReadonly"
        },
        {
            "key": "ctrl+q",
            "command": "editor.action.addSelectionToNextFindMatch",
            "when": "editorFocus"
        },
        {
            "key": "ctrl+d",
            "command": "-editor.action.addSelectionToNextFindMatch",
            "when": "editorFocus"
        },
        {
            "key": "ctrl+d",
            "command": "editor.action.deleteLines",
            "when": "textInputFocus && !editorReadonly"
        },
        {
            "key": "ctrl+shift+k",
            "command": "-editor.action.deleteLines",
            "when": "textInputFocus && !editorReadonly"
        }
    ]
  user_settings.json: |-
    {
        "workbench.colorTheme": "Default Dark+"
    }
  launch.json: |-
    {
        "version": "0.2.0",
        "configurations": [
            {
                "name": "Python: Remote Attach",
                "type": "python",
                "request": "attach",
                "connect": {
                    "host": "airflow-webserver-service.{{  .Values.global.services_namespace  }}.svc",
                    "port": 5678
                },
                "justMyCode": false,
                "pathMappings": [
                    {
                        "localRoot": "${workspaceFolder}",
                        "remoteRoot": "/home/airflow"
                    }
                ]
            }
        ]
    }
kind: ConfigMap
metadata:
  name: code-config-{{ $uuid }}
  namespace: "{{ not .Values.image | ternary  .Values.global.services_namespace .Values.global.jobs_namespace }}"
---