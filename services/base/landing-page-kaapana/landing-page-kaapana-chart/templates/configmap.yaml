---
apiVersion: v1
data:
  commonData.json: |-
    {
      "name": "Kaapana",
      "shortName": "Kaapana",
      "infoText": "Welcome to Kaapana",
      "version": "{{ .Values.global.release_name }}:{{ .Values.global.kaapana_build_version }} | Build-Timestamp: {{ .Values.global.build_timestamp }} | Build-Branch: {{ .Values.global.platform_build_branch }} - {{ .Values.global.platform_last_commit_timestamp }}"
    }
  defaultExternalWebpages.json: |-
    {
      "store": {
        "label": "Store",
        "icon": "mdi-store",
        "linkTo": "/api",
        "description": "The Store is the place where the data like images, object, etc. are stored. I.e. the platform has its own PACS system to which one can send images from another PACS. All application running within the platofmr will communicate with the PACS of the platform. Besides the PACS there can be other storage applications or tools like XNAT or Minio activated.",
        "subSections": {
          "dcm4che": {
            "label": "PACS",
            "endpoint": "/dcm4chee-arc",
            "linkTo": "/dcm4chee-arc/ui2/"
          },
          "ohif": {
            "label": "OHIF",
            "endpoint": "/ohif",
            "linkTo": "/ohif/"
          },
          "slim": {
            "label": "SLIM",
            "endpoint": "/slim",
            "linkTo": "/slim/"
          },
          "minio": {
            "label": "Minio",
            "endpoint": "/minio-console",
            "linkTo": "/minio-console/"
          },
          "Documents": {
            "label": "Documents",
            "endpoint": "/collabora-wopi",
            "linkTo": "/collabora-wopi/"
          },
          "persistence": {
            "label": "Persistence Layer",
            "endpoint": "/persistence/",
            "linkTo": "/persistence/"
          }
        }
      },
      "meta": {
        "label": "Meta",
        "icon": "mdi-chart-bar",
        "linkTo": "/meta",
        "description": "Meta defines the section from where data of the Store are evaluated and displayed. The central application are OpenSearch and OpenSearch Dashboards, from which one can query and filter the existing data as well as create dashboards with a wide variety of plots. In order to use the functionalities of OpenSearch Dashboards, the data must be made available to OpenSearch first.",
        "subSections": {

        }
      },
      "system": {
        "label": "System",
        "icon": "mdi-view-dashboard-variant ",
        "linkTo": "/system",
        "description": "The system is the core of the platform. From here all applications and services are configured, started and maintained with the core application Kubernetes. Additionally the traffic on the page as well as the authentification with user roles is managed here",
        "subSections": {
          "airflow": {
            "label": "Airflow",
            "endpoint": "/flow",
            "linkTo": "/flow/home"
          },
          "dashboard": {
            "label": "Kubernetes",
            "endpoint": "/kubernetes",
            "linkTo": "/kubernetes/#/pod?namespace={{  .Values.global.services_namespace  }}"
          },
          "keycloak": {
            "label": "Keycloak",
            "endpoint": "/auth",
            "linkTo": "/auth/admin/master/console/#/kaapana"
          },
          "traefik": {
            "label": "Traefik",
            "endpoint": "/traefik",
            "linkTo": "/traefik/dashboard/"
          },
          "workflow": {
            "label": "Workflow-data",
            "endpoint": "/workflowdata",
            "linkTo": "/workflowdata/"
          },
          "jupyterlab": {
            "label": "Jupyterlab",
            "endpoint": "/jupyterlab",
            "linkTo": "/jupyterlab"
          },
          "prometheus": {
            "label": "Prometheus",
            "endpoint": "/prometheus",
            "linkTo": "/prometheus/"
          },
          "grafana": {
            "label": "Grafana",
            "endpoint": "/grafana",
            "linkTo": "/grafana/dashboards"
          }
        }
      }
    }
kind: ConfigMap
metadata:
  name: landing-page-config
  namespace: "{{ .Values.global.services_namespace }}"
