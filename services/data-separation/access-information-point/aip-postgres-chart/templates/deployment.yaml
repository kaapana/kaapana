---
apiVersion: apps/v1
kind: Deployment
metadata:
  # This name uniquely identifies the Deployment
  name: access-information-point
  namespace: "{{ .Values.global.services_namespace }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app-name: access-information-point
  strategy:
    type: Recreate
  template: 
    metadata:
      labels:
        app-name: access-information-point
    spec:
      containers:
      - name: access-information-point
        image: "{{ .Values.global.registry_url }}/postgres-15.6-alpine:{{ .Values.global.kaapana_build_version  }}"
        # imagePullPolicy: Always
        imagePullPolicy:  {{ .Values.global.pull_policy_images }}
        env: # Environment variables
        - name: POSTGRES_USER
          value: {{ .Values.global.postgres_user }}
        - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: access-information-point-postgres-password
                key: access-information-point-postgres-password
        ports: # Port(s) on which your application runs
          - containerPort: 5432
        resources:
          limits:
            memory: "5Gi"
          requests:
            memory: "100Mi"
        volumeMounts:
          - name: postgres-data # key of volume mount
            mountPath: "/var/lib/postgresql/data" # path in container
          - name:  unix-socket-dir
            mountPath: /var/run/postgresql
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
      volumes:
      - name: postgres-data # key of volume mount
        persistentVolumeClaim:
          claimName: access-information-point-pv-claim
      - name: unix-socket-dir
        emptyDir: {}
      priorityClassName: kaapana-high-priority
      imagePullSecrets:
        - name: registry-secret
