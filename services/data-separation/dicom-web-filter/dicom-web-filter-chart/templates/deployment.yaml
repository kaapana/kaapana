---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dicom-web-filter
  namespace: "{{ .Values.global.services_namespace }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: dicom-web-filter
      app.kubernetes.io/component: backend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dicom-web-filter
        app.kubernetes.io/component: backend
    spec:
      initContainers:
          - name: init-dicom-web-filter
            image: "{{ .Values.global.registry_url }}/service-checker:{{ .Values.global.kaapana_build_version }}"
            imagePullPolicy: "{{ .Values.global.pull_policy_images }}"
            env:
              - name: WAIT
                value: "dcm4che,dcm4chee-service.{{  .Values.global.services_namespace  }}.svc,8080;{{ .Values.kaapana_database.appName | default .Release.Name }}-database-,{{ .Values.kaapana_database.appName | default .Release.Name }}-database-service.{{  .Values.global.services_namespace  }}.svc,5432;keycloak,keycloak-external-service.{{  .Values.global.admin_namespace  }}.svc,80,/auth/realms/kaapana/.well-known/openid-configuration"
              - name: DELAY
                value: "2"
              - name: TIMEOUT
                value: "10"
      containers:
      - name: dicom-web-filter
        image: "{{ .Values.global.registry_url }}/dicom-web-filter:{{ .Values.global.kaapana_build_version  }}"
        imagePullPolicy: "{{ .Values.global.pull_policy_images }}"
        env:
        - name: PORT
          value: "8080"
        - name: WORKERS
          value: "4"
        - name: DICOMWEB_BASE_URL
          value: "http://dcm4chee-service.{{  .Values.global.services_namespace  }}.svc:8080/dcm4chee-arc/aets/KAAPANA/rs"
        - name: DICOMWEB_BASE_URL_WADO_URI
          value: "http://dcm4chee-service.{{  .Values.global.services_namespace  }}.svc:8080/dcm4chee-arc/aets/KAAPANA/wado"
        - name: DATABASE_URL
          value: postgresql+asyncpg://{{ .Values.kaapana_database.postgres_user}}:{{ .Values.kaapana_database.postgres_password}}@{{ .Values.kaapana_database.appName | default .Release.Name }}-database-service.{{  .Values.global.services_namespace  }}.svc:5432
        - name: DWF_IDENTITY_OPENID_CONFIG_URL
          value: "http://keycloak-external-service.{{  .Values.global.admin_namespace  }}.svc:80/auth/realms/kaapana/.well-known/openid-configuration"
        - name: DWF_IDENTITY_OPENID_CLIENT_ID
          value: "kaapana"
        - name: http_proxy
          value: "{{ .Values.global.http_proxy }}"
        - name: https_proxy
          value: "{{ .Values.global.http_proxy }}"
        - name: no_proxy
          value: ".svc,.svc.cluster,.svc.cluster.local,{{ .Values.global.hostname }}"
{{- if .Values.global.dev_files }}
        - name: DEV_FILES
          value: "True"
{{- end }}
        ports:
          - containerPort: 8080
        resources:
          limits:
            memory: "5Gi"
          requests:
            memory: "256Mi"
        volumeMounts:
        {{- if .Values.global.dev_files }}
        - name: dicom-web-filter-dev
          mountPath: /app
        {{- end }}
        - name: tmp
          mountPath: /tmp
        - name: kaapana-cert
          mountPath: /etc/certs/kaapana.pem
          subPath: tls.crt
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
      priorityClassName: kaapana-high-priority
      imagePullSecrets:
        - name: registry-secret
      volumes:
      {{- if .Values.global.dev_files }}
      - name: dicom-web-filter-dev
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-dev-pv-claim
      {{- end }}
      - name: kaapana-cert
        secret:
          secretName: certificate
          defaultMode: 420
      - name: tmp
        emptyDir: {}
