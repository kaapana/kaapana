"""v0-4-2

Revision ID: 6defb625827a
Revises: b2c8d2f8b682
Create Date: 2025-04-16 08:12:46.809352

"""

import os
from typing import Sequence, Union

import requests
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects.postgresql import UUID

# revision identifiers, used by Alembic.
revision: str = "6defb625827a"
down_revision: Union[str, None] = "b2c8d2f8b682"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def fetch_project_id_uuid_mapping():
    aii_service = os.environ["ACCESS_INFORMATION_INTERFACE_URL"]
    response = requests.get(f"{aii_service}/projects")
    projects = response.json()

    return {project["int_id"]: project["id"] for project in projects}


def fetch_uuid_to_project_id_mapping():
    id_uuid_map = fetch_project_id_uuid_mapping()
    return {uuid: pid for pid, uuid in id_uuid_map.items()}


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    id_uuid_map = fetch_project_id_uuid_mapping()

    connection = op.get_bind()
    op.drop_constraint(
        "data_projects_project_id_series_instance_uid_key",
        "data_projects",
        type_="unique",
    )
    op.alter_column("data_projects", "project_id", new_column_name="old_project_id")
    op.add_column("data_projects", sa.Column("project_id", UUID(), nullable=True))

    # Update existing records using the map
    for old_id, new_uuid in id_uuid_map.items():
        if old_id:
            connection.execute(
                sa.text(
                    """
                    UPDATE data_projects SET project_id = :uuid WHERE old_project_id = :old_id
                """
                ),
                {"uuid": new_uuid, "old_id": old_id},
            )
    op.create_unique_constraint(
        None, "data_projects", ["project_id", "series_instance_uid"]
    )
    op.alter_column("data_projects", "project_id", nullable=False)
    ### end Alembic commands ###
