apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-webserver-config
  namespace: "{{ .Values.global.services_namespace }}"
data:
   webserver_config.py: |+
    from flask import get_flashed_messages, request, redirect, flash
    from flask_appbuilder import expose
    from flask_appbuilder._compat import as_unicode
    from flask_appbuilder.security.views import AuthView
    # from airflow.www.fab_security.manager import AUTH_OAUTH
    from airflow.www.fab_security.manager import AUTH_REMOTE_USER
    from flask_login import login_user, logout_user
    from airflow.www.security import AirflowSecurityManager
    AUTH_TYPE = AUTH_REMOTE_USER
    AUTH_USER_REGISTRATION = True
    AUTH_USER_REGISTRATION_ROLE = "Admin"

    class CustomAuthRemoteUserView(AuthView):
        login_template = ""

        @expose("/login/")
        def login(self):
            username = request.headers.get('X-Forwarded-Preferred-Username')
            email = request.headers.get('X-Forwarded-Email:')
            print(f"##### {username=}")

            if username:
                user = self.appbuilder.sm.auth_user_remote_user(username)
                print(f"############### {user=}")
                if user is None:
                    flash(as_unicode(self.invalid_login_message), "warning")
                else:
                    login_user(user)
            else:
                flash(as_unicode(self.invalid_login_message), "warning")

            # Flush "Access is Denied" flash messaage
            get_flashed_messages()
            return redirect(self.appbuilder.get_url_for_index)

        @expose("/logout/")
        def logout(self):
            logout_user()
            return redirect("/oauth2/sign_out?redirect=/")

    class CustomAirflowSecurityManager(AirflowSecurityManager):
        authremoteuserview = CustomAuthRemoteUserView


    SECURITY_MANAGER_CLASS = CustomAirflowSecurityManager
